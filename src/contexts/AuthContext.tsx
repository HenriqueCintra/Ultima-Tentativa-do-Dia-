// src/contexts/AuthContext.tsx - VERS√ÉO COMPLETA COM getAuthToken

import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import AuthService from '../api/authService';

interface User {
  id: number;
  username: string;
  email: string;
  nickname: string;
  first_name?: string;
  last_name?: string;
  data_nascimento?: string;
  equipe?: number; // ID da equipe, pode ser null
  // Dados adicionais que podem vir da API
  data_cadastro?: string;
  is_active?: boolean;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  refreshUser: () => Promise<void>;
  // ‚úÖ M√âTODO OBRIGAT√ìRIO para o useRanking funcionar
  getAuthToken: () => string | null;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAuthenticated: false,
  login: async () => { },
  logout: () => { },
  refreshUser: async () => { },
  getAuthToken: () => null, // ‚úÖ ADICIONADO
});

export const useAuth = () => useContext(AuthContext);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // ‚úÖ FUN√á√ÉO OBRIGAT√ìRIA: Retorna o token de autentica√ß√£o
  const getAuthToken = (): string | null => {
    try {
      // Tenta obter o token do localStorage primeiro
      const token = localStorage.getItem('authToken') || localStorage.getItem('access_token');

      if (token) {
        console.log('üîë Token encontrado no localStorage');
        return token;
      }

      // Se n√£o encontrar no localStorage, tenta do AuthService
      if (AuthService.isAuthenticated && AuthService.isAuthenticated()) {
        // Alguns AuthServices podem ter um m√©todo para obter o token atual
        if (typeof (AuthService as any).getToken === 'function') {
          const serviceToken = (AuthService as any).getToken();
          console.log('üîë Token obtido do AuthService');
          return serviceToken;
        }
      }

      console.warn('‚ö†Ô∏è Token n√£o encontrado');
      return null;
    } catch (error) {
      console.error('‚ùå Erro ao obter token:', error);
      return null;
    }
  };

  // Carrega o usu√°rio quando o componente √© montado
  useEffect(() => {
    const loadUser = async () => {
      if (AuthService.isAuthenticated()) {
        try {
          console.log('üîÑ Carregando usu√°rio autenticado...');
          await refreshUser();
          console.log('‚úÖ Usu√°rio carregado com sucesso');
        } catch (error) {
          console.error("‚ùå Erro ao carregar usu√°rio:", error);
          // Se houver erro, limpa os tokens
          AuthService.logout();
        }
      } else {
        console.log('üö´ Usu√°rio n√£o est√° autenticado');
      }
      setLoading(false);
    };

    loadUser();
  }, []);

  const refreshUser = async () => {
    try {
      console.log('üîÑ Atualizando dados do usu√°rio...');
      const response = await AuthService.getProfile();

      // Log dos dados do usu√°rio para debug
      console.log('üë§ Dados do usu√°rio:', {
        id: response.data.id,
        username: response.data.username,
        nickname: response.data.nickname,
        equipe: response.data.equipe
      });

      setUser(response.data);
    } catch (error) {
      console.error("‚ùå Erro ao obter perfil do usu√°rio:", error);
      throw error;
    }
  };

  const login = async (username: string, password: string) => {
    try {
      console.log('üîê Fazendo login para:', username);

      // Faz o login atrav√©s do AuthService
      await AuthService.login({ username, password });
      console.log('‚úÖ Login realizado com sucesso');

      // Carrega os dados do usu√°rio
      await refreshUser();
      console.log('‚úÖ Dados do usu√°rio carregados ap√≥s login');

    } catch (error) {
      console.error('‚ùå Erro no login:', error);
      throw error;
    }
  };

  const logout = () => {
    try {
      console.log('üëã Fazendo logout...');

      // Limpa os dados do AuthService
      AuthService.logout();

      // Limpa o estado do usu√°rio
      setUser(null);

      // Limpa tokens adicionais do localStorage (se houver)
      localStorage.removeItem('authToken');
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');

      console.log('‚úÖ Logout realizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
    }
  };

  // ‚úÖ VALOR DO CONTEXTO COM TODAS AS FUN√á√ïES NECESS√ÅRIAS
  const contextValue: AuthContextType = {
    user,
    loading,
    isAuthenticated: !!user,
    login,
    logout,
    refreshUser,
    getAuthToken, // ‚úÖ OBRIGAT√ìRIO para o useRanking
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;

// ‚úÖ HOOK AUXILIAR: Para facilitar o acesso ao token em outros lugares
export const useAuthToken = (): string | null => {
  const { getAuthToken } = useAuth();
  return getAuthToken();
};

// ‚úÖ HOOK AUXILIAR: Para verificar se o usu√°rio tem equipe
export const useUserTeam = (): { hasTeam: boolean; teamId: number | null } => {
  const { user } = useAuth();
  return {
    hasTeam: !!user?.equipe,
    teamId: user?.equipe || null
  };
};